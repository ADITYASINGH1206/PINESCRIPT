// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © lifowak387

//@version=5
strategy("SMT Divergences", "Divergences Zero Strategy (GEMINI ORIGINAL)", overlay=true, max_lines_count=500, max_labels_count=500)

// Settings
length = input.int(0, 'Pivot LookbackL')
lengths = input.int(0, 'Pivot LookbackR')

// Symbol A
useSym1 = input(true, 'Comparison Symbol', inline='symA')
sym1 = input.symbol('NIFTY', '', inline='symA')

// Style
bullDivCss = input.color(#ff1100, 'Swing High', group='Style')
bearDivCss = input.color(#2157f3, 'Swing Low', group='Style')

// Conditions
divergence_candle = input.bool(true, "DIVERGENCE CANDLE ON/OFF")
divergence_candle_nxt = input.bool(true, "HIGHER OR LOWER CLOSE ON/OFF")

// Dashboard
showDash = input(false, 'Show Dashboard', group='Dashboard')
dashLoc = input.string('Top Right', 'Location', options=['Top Right', 'Bottom Right', 'Bottom Left'], group='Dashboard')
textSize = input.string('Small', 'Size', options=['Tiny', 'Small', 'Normal'], group='Dashboard')

// Function
n = bar_index

get_hl() => [high, low, close]

get_divergence(ph, y2, sym_y2, css) =>
    var float y1 = na
    var float sym_y1 = na
    var int x1 = na
    var smt = 0

    if y2 != y2[1] and sym_y2 != sym_y2[1]
        // Test for SMT
        if (y2 - y1) * (sym_y2 - sym_y1) < 0
            line.new(n[lengths], y2, x1, y1, color=css)
            smt += 1
        
        sym_y1 := sym_y2
        y1 := y2
        x1 := n[lengths]
    else if (ph and y2 > y2[1]) or (not ph and y2 < y2[1])
        sym_y1 := na
        y1 := y2
        x1 := n[lengths]
    
    smt

// Main variables
var phN = 0
var plN = 0
var ph_smt1 = 0.
var pl_smt1 = 0.
var curr_checkb = false
var curr_checks = false

// Declare next_candles variable
var next_candleb = false
var next_candles = false
if not divergence_candle_nxt
    next_candleb := true
    next_candles := true

if divergence_candle_nxt
    if close[1]<close
        next_candleb := true
        next_candles := false
    if close[1]>close
        next_candleb := false
        next_candles := true
if not divergence_candle
    curr_checkb := true
    curr_checks := true
else
    if close[lengths] > open[lengths]
        curr_checkb := true
        curr_checks := false
    else if close[lengths] < open[lengths]
        curr_checkb := false
        curr_checks := true

ticker1 = syminfo.ticker(sym1)

// Detect swing highs/lows and divergences
ph = fixnan(ta.pivothigh(length, lengths))
pl = fixnan(ta.pivotlow(length, lengths))
phN += ph != ph[1] ? 1 : 0
plN += pl != pl[1] ? 1 : 0

// Comparison symbol pivots
[h1, l1, c1] = request.security(sym1, timeframe.period, get_hl())

// Detect swing high divergences
if useSym1
    sym_ph1 = fixnan(ta.pivothigh(h1, length, lengths))
    sym_pl1 = fixnan(ta.pivotlow(l1, length, lengths))

    ph_smt1 := get_divergence(true, ph, sym_ph1, bullDivCss)
    pl_smt1 := get_divergence(false, pl, sym_pl1, bearDivCss)

/// Only draw labels when a confirmed signal and next candle condition are met
if ph != ph[1] and ph_smt1 > ph_smt1[1] 
    label.new(n, ph[lengths], text=ticker1, color=bullDivCss, style=label.style_label_down, textcolor=color.white, size=size.tiny)
else if pl != pl[1] and pl_smt1 > pl_smt1[1]
    label.new(n, pl[lengths], text=ticker1, color=bearDivCss, style=label.style_label_up, textcolor=color.white, size=size.tiny)
if ph != ph[1] and ph_smt1[1] > ph_smt1[2] and next_candles 
    strategy.entry("Sell" , strategy.short)
else if pl != pl[1] and pl_smt1[1] > pl_smt1[2] and next_candleb
    strategy.entry("Buy" , strategy.long)