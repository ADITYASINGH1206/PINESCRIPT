//@version=5
strategy(title="RSI Sims", shorttitle="RSI", format=format.price, precision=2,overlay = true)

symbol1 = input.symbol("EUR","SYMBOL 1")
symbol2 = input.symbol("USD","SYMBOL 2")
timeframe1 = input.timeframe("180","TIMEFRAME 1")
timeframe2 = input.timeframe("D","TIMEFRAME 2")

ma1(source, length, type) =>
    switch type     
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)
        
ma2(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

rsiLengthInput = input.int(14, minval=1, title="RSI Length", group="RSI Settings")
rsiSourceInput = input.source(close, "Source", group="RSI Settings")
ma1TypeInput = input.string("SMA", title="MA1 Type", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA1 Settings")
ma1LengthInput = input.int(14, title="MA1 Length", group="MA1 Settings")
ma2TypeInput = input.string("SMA", title="MA2 Type", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA2 Settings")
ma2LengthInput = input.int(100, title="MA2 Length", group="MA2 Settings")

up = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
down = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
rsiMA1 = ma1(rsi, ma1LengthInput, ma1TypeInput)
rsiMA2 = ma2(rsi, ma2LengthInput, ma2TypeInput)

plot(rsi, "RSI", color=#9575cd)
rsiMA1P = plot(rsiMA1, "RSI-based MA1", color=#fff59d)
rsiMA2P = plot(rsiMA2, "RSI-based MA2", color=#5c74d6)
rsiUpperBand = hline(70, "RSI Upper Band", color=#b2b5be80)
hline(50, "RSI Middle Band", color=#b2b5be80)
rsiLowerBand = hline(30, "RSI Lower Band", color=#b2b5be80)
fill(rsiUpperBand, rsiLowerBand, color=#522da819, title="RSI Background Fill")

// Color Change SMA2

col=rsiMA2<open and rsiMA2<close  and rsiMA2<rsiMA1 or rsiMA2<rsiMA1 ? #66bb6a : #f7525f
plot(rsiMA2, color=col, linewidth=1)

// Color Fill

color FillColor = rsiMA1 > rsiMA2 ? #32ea3b19 : #ff000019
fill(rsiMA1P, rsiMA2P, FillColor)


typeMA = input.string(title = "Method", defval = "SMA", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="Smoothing")
smoothingLength = input.int(title = "Length", defval = 12, minval = 1, maxval = 100, group="Smoothing")

smoothingLine = ma1(rsiMA1, smoothingLength, typeMA)
plot(smoothingLine, title="Smoothing Line", color=#ff9800, display=display.none)


lengthInput = input.int(100, title="Length", minval = 1, maxval = 5000)
sourceInput = input.source(close, title="Source")

group1 = "Channel Settings"
useUpperDevInput = input.bool(true, title="Upper Deviation", inline = "Upper Deviation", group = group1)
upperMultInput = input.float(2.0, title="", inline = "Upper Deviation", group = group1)
useLowerDevInput = input.bool(true, title="Lower Deviation", inline = "Lower Deviation", group = group1)
lowerMultInput = input.float(2.0, title="", inline = "Lower Deviation", group = group1)

group2 = "Display Settings"
showPearsonInput = input.bool(true, "Show Pearson's R", group = group2)
extendLeftInput = input.bool(false, "Extend Lines Left", group = group2)
extendRightInput = input.bool(true, "Extend Lines Right", group = group2)
extendStyle = switch
    extendLeftInput and extendRightInput => extend.both
    extendLeftInput => extend.left
    extendRightInput => extend.right
    => extend.none

group3 = "Color Settings"
colorUpper = input.color(color.new(color.blue, 85), "", inline = group3, group = group3)
colorLower = input.color(color.new(color.red, 85), "", inline = group3, group = group3)

calcSlope(source, length) =>
    max_bars_back(source, 5000)
    if not barstate.islast or length <= 1
        [float(na), float(na), float(na)]
    else
        sumX = 0.0
        sumY = 0.0
        sumXSqr = 0.0
        sumXY = 0.0
        for i = 0 to length - 1 by 1
            val = source[i]
            per = i + 1.0
            sumX += per
            sumY += val
            sumXSqr += per * per
            sumXY += val * per
        slope = (length * sumXY - sumX * sumY) / (length * sumXSqr - sumX * sumX)
        average = sumY / length
        intercept = average - slope * sumX / length + slope
        [slope, average, intercept]
        
[s, a, i] = calcSlope(sourceInput, lengthInput)
startPrice = i + s * (lengthInput - 1)
endPrice = i
var line baseLine = na
if na(baseLine) and not na(startPrice)
    baseLine := line.new(bar_index - lengthInput + 1, startPrice, bar_index, endPrice, width=1, extend=extendStyle, color=color.new(colorLower, 0))
else
    line.set_xy1(baseLine, bar_index - lengthInput + 1, startPrice)
    line.set_xy2(baseLine, bar_index, endPrice)
    na
    
calcDev(source, length, slope, average, intercept) =>
    upDev = 0.0
    dnDev = 0.0
    stdDevAcc = 0.0
    dsxx = 0.0
    dsyy = 0.0
    dsxy = 0.0
    periods = length - 1
    daY = intercept + slope * periods / 2
    val = intercept
    for j = 0 to periods by 1
        price = high[j] - val
        if price > upDev
            upDev := price
        price := val - low[j]
        if price > dnDev
            dnDev := price
        price := source[j]
        dxt = price - average
        dyt = val - daY
        price -= val
        stdDevAcc += price * price
        dsxx += dxt * dxt
        dsyy += dyt * dyt
        dsxy += dxt * dyt
        val += slope
    stdDev = math.sqrt(stdDevAcc / (periods == 0 ? 1 : periods))
    pearsonR = dsxx == 0 or dsyy == 0 ? 0 : dsxy / math.sqrt(dsxx * dsyy)
    [stdDev, pearsonR, upDev, dnDev]
    
[stdDev, pearsonR, upDev, dnDev] = calcDev(sourceInput, lengthInput, s, a, i)
upperStartPrice = startPrice + (useUpperDevInput ? upperMultInput * stdDev : upDev)
upperEndPrice = endPrice + (useUpperDevInput ? upperMultInput * stdDev : upDev)
var line upper = na
lowerStartPrice = startPrice + (useLowerDevInput ? -lowerMultInput * stdDev : -dnDev)
lowerEndPrice = endPrice + (useLowerDevInput ? -lowerMultInput * stdDev : -dnDev)
var line lower = na
if na(upper) and not na(upperStartPrice)
    upper := line.new(bar_index - lengthInput + 1, upperStartPrice, bar_index, upperEndPrice, width=1, extend=extendStyle, color=color.new(colorUpper, 0))
else
    line.set_xy1(upper, bar_index - lengthInput + 1, upperStartPrice)
    line.set_xy2(upper, bar_index, upperEndPrice)
    na
if na(lower) and not na(lowerStartPrice)
    lower := line.new(bar_index - lengthInput + 1, lowerStartPrice, bar_index, lowerEndPrice, width=1, extend=extendStyle, color=color.new(colorUpper, 0))
else
    line.set_xy1(lower, bar_index - lengthInput + 1, lowerStartPrice)
    line.set_xy2(lower, bar_index, lowerEndPrice)
    na
linefill.new(upper, baseLine, color = colorUpper)
linefill.new(baseLine, lower, color = colorLower)

float trend = math.sign(startPrice - endPrice)
alertcondition(sourceInput > line.get_price(upper, bar_index) or sourceInput < line.get_price(lower, bar_index), title='Regression Channel Exited', message="The price movement has exited Regression Channel's bounds")
alertcondition(trend[1] >= 0 and trend < 0, title='Switched to Uptrend', message='The Regression Channel trend switched from Downtrend to Uptrend')
alertcondition(trend[1] <= 0 and trend > 0, title='Switched to Downtrend', message='The Regression Channel trend switched from Uptrend to Downtrend')

// Pearson's R
var label r = na
label.delete(r[1])
if showPearsonInput and not na(pearsonR)
    r := label.new(bar_index - lengthInput + 1, lowerStartPrice, str.tostring(pearsonR, "#.################"), color = color.new(color.white, 100), textcolor=color.new(colorUpper, 0), size=size.normal, style=label.style_label_up)

//mfi

length = input.int(title="Length", defval=14, minval=1, maxval=2000)
src = hlc3
mf = ta.mfi(src, length)
plot(mf, "MF", color=#7E57C2)
overbought=hline(80, title="Overbought", color=#787B86)
hline(50, "Middle Band", color=color.new(#787B86, 50))
oversold=hline(20, title="Oversold", color=#787B86)
fill(overbought, oversold, color=color.rgb(126, 87, 194, 90), title="Background")

//RSI
sym1rsi_tf1 = request.security(symbol1,timeframe1,rsi)
sym1rsi_tf2 = request.security(symbol1,timeframe2,rsi)
sym2rsi_tf1 = request.security(symbol2,timeframe1,rsi)
sym2rsi_tf2 = request.security(symbol2,timeframe2,rsi)


//mfi
sym1mfi_tf1 = request.security(symbol1,timeframe1,mf)
sym1mfi_tf2 = request.security(symbol1,timeframe2,mf)
sym2mfi_tf1 = request.security(symbol2,timeframe1,mf)
sym2mfi_tf2 = request.security(symbol2,timeframe2,mf)

//linear Regression
sym1linear_tf1 = request.security(symbol1,timeframe1,trend)
sym1linear_tf2 = request.security(symbol1,timeframe2,trend)
sym2linear_tf1 = request.security(symbol2,timeframe1,trend)
sym2linear_tf2 = request.security(symbol2,timeframe2,trend)

rsi_buy = input(50,"RSI BUY")
rsi_sell = input(30,"RSI SELL")
mfi_buy= input(50,"MFI BUY")
mfi_sell= input(30,"MFI SELL")

buycondition1 = sym1rsi_tf1 < rsi_buy
buycondition2 = sym1rsi_tf2 < rsi_buy
buycondition3 = sym2rsi_tf1 < rsi_buy
buycondition4 = sym2rsi_tf2 < rsi_buy
//
buycondition5 = sym1mfi_tf1 < mfi_buy
buycondition6 = sym1mfi_tf2 < mfi_buy
buycondition7 = sym2mfi_tf1 < mfi_buy
buycondition8 = sym2mfi_tf2 < mfi_buy
//
buycondition9 = sym1linear_tf1 > 0
buycondition10 = sym1linear_tf2 < 0
buycondition11 = sym2linear_tf1 > 0
buycondition12 = sym2linear_tf2 < 0

//SELL
sellcondition1 = sym1rsi_tf1 > rsi_sell
sellcondition2 = sym1rsi_tf2 > rsi_sell
sellcondition3 = sym2rsi_tf1 > rsi_sell
sellcondition4 = sym2rsi_tf2 > rsi_sell
//
sellcondition5 = sym1mfi_tf1 > mfi_sell
sellcondition6 = sym1mfi_tf2 > mfi_sell
sellcondition7 = sym2mfi_tf1 > mfi_sell
sellcondition8 = sym2mfi_tf2 > mfi_sell

//
sellcondition9 = sym1linear_tf1 > 0
sellcondition10 = sym1linear_tf2 > 0
sellcondition11 = sym2linear_tf1 > 0
sellcondition12 = sym2linear_tf2 > 0

if buycondition1 and buycondition2 and buycondition3  and buycondition4 and buycondition5 and buycondition6 and buycondition7 and buycondition8 and buycondition9 and buycondition2 and buycondition10 and buycondition11 and buycondition12 
    strategy.entry("Buy",strategy.long)

if sellcondition1 and sellcondition2 and sellcondition3 and sellcondition4 and sellcondition5 and sellcondition6 and sellcondition7 and sellcondition8 and sellcondition9 and sellcondition10 and sellcondition11 and sellcondition12
    strategy.entry("Sell",strategy.short)